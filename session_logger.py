#!/usr/bin/env python3
"""
Session Logger for Claude Code interactions.
Automatically logs session prompts and responses with timestamps.
"""

import datetime
import os
import sys


class SessionLogger:
    def __init__(self, log_dir="."):
        self.log_dir = log_dir
        self.timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        self.log_file = os.path.join(log_dir, f"session_log_{self.timestamp}.md")
        self.session_start = datetime.datetime.now()
        self.entries = []
        
        # Create initial log file
        self.init_log_file()
    
    def init_log_file(self):
        """Initialize the log file with header information."""
        header = f"""# Claude Code Session Log
**Session Date:** {self.session_start.strftime('%B %d, %Y')}  
**Start Time:** {self.session_start.strftime('%H:%M:%S')}  
**Working Directory:** {os.getcwd()}

---

## Session Summary
*This will be updated as the session progresses*

---

## Conversation Log

"""
        
        with open(self.log_file, 'w', encoding='utf-8') as f:
            f.write(header)
    
    def log_interaction(self, user_prompt, claude_response, timestamp=None):
        """Log a user prompt and Claude's response."""
        if timestamp is None:
            timestamp = datetime.datetime.now()
        
        entry = {
            'timestamp': timestamp,
            'user_prompt': user_prompt,
            'claude_response': claude_response
        }
        
        self.entries.append(entry)
        self._append_to_file(entry)
    
    def _append_to_file(self, entry):
        """Append a single entry to the log file."""
        time_str = entry['timestamp'].strftime('%H:%M:%S')
        
        log_entry = f"""### User Request {len(self.entries)}
**Time:** {time_str}  
**User:** {entry['user_prompt']}

**Claude Response:** {entry['claude_response']}

---

"""
        
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(log_entry)
    
    def update_summary(self, summary):
        """Update the session summary in the log file."""
        # Read current content
        with open(self.log_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Replace the summary placeholder
        updated_content = content.replace(
            "*This will be updated as the session progresses*",
            summary
        )
        
        # Write back
        with open(self.log_file, 'w', encoding='utf-8') as f:
            f.write(updated_content)
    
    def add_files_created(self, files_list):
        """Add a section about files created during the session."""
        files_section = "\n## Files Created This Session\n\n"
        
        for i, file_info in enumerate(files_list, 1):
            if isinstance(file_info, str):
                files_section += f"{i}. **{file_info}**\n"
            else:
                filename = file_info.get('name', 'Unknown file')
                description = file_info.get('description', '')
                files_section += f"{i}. **{filename}** - {description}\n"
        
        files_section += "\n---\n"
        
        # Append to file
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(files_section)
    
    def finalize_log(self, accomplishments=None):
        """Finalize the log with accomplishments and closing information."""
        footer = "\n## Key Accomplishments\n\n"
        
        if accomplishments:
            for accomplishment in accomplishments:
                footer += f"✅ {accomplishment}\n"
        else:
            footer += "✅ Session completed successfully\n"
        
        footer += f"\n---\n\n*Log automatically generated by Claude Code session logging system*\n"
        footer += f"*Session ended: {datetime.datetime.now().strftime('%H:%M:%S')}*\n"
        
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(footer)
    
    def get_log_path(self):
        """Return the path to the current log file."""
        return self.log_file


def create_session_logger(log_dir="."):
    """Factory function to create a new session logger."""
    return SessionLogger(log_dir)


if __name__ == "__main__":
    # Example usage
    logger = create_session_logger()
    
    # Log some example interactions
    logger.log_interaction(
        "Create a BPE script for DNA sequences",
        "Created bpe_processor.py with full BPE implementation"
    )
    
    logger.update_summary("This session focused on creating BPE tools for bioinformatics")
    
    logger.add_files_created([
        {"name": "bpe_processor.py", "description": "Main BPE processing script"},
        {"name": "session_logger.py", "description": "Session logging utility"}
    ])
    
    logger.finalize_log([
        "Created BPE processor script",
        "Implemented session logging system",
        "Tested with real DNA sequence data"
    ])
    
    print(f"Session log created: {logger.get_log_path()}")